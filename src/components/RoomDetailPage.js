import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { dbRealtime } from '../services/firebase';
import { ref, onValue, off, set } from 'firebase/database';
import {
    AppBar,
    Toolbar,
    IconButton,
    Typography,
    Container,
    Card,
    CardContent,
    Grid,
    Box,
    Button,
    Switch,
    FormControlLabel,
    Chip,
    Alert,
    Slider,
    Divider,
} from '@mui/material';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import HomeIcon from '@mui/icons-material/Home';
import PeopleIcon from '@mui/icons-material/People';
import ThermostatIcon from '@mui/icons-material/Thermostat';
import LightModeIcon from '@mui/icons-material/LightMode';
import AirIcon from '@mui/icons-material/Air';
import GasMeterIcon from '@mui/icons-material/GasMeter';
import SensorsIcon from '@mui/icons-material/Sensors';
import OpacityIcon from '@mui/icons-material/Opacity';

const RoomDetailPage = () => {
    const navigate = useNavigate();
    const { id } = useParams();
    const [userInfo, setUserInfo] = useState(null);
    const [roomState, setRoomState] = useState({
        id: id,
        name: `Ph√≤ng ${id}`,
        status: 'Tr·ªëng',
        temperature: '24¬∞C',
        price: '---',
        occupant: null,
        // Thi·∫øt b·ªã ƒëi·ªÅu khi·ªÉn
        lightOn: false,
        fanOn: false,
        fanSpeed: 50,
        // C·∫£m bi·∫øn
        gasLevel: 20,
        gasAlert: false,
        motionDetected: false,
        humidity: 50,
        // Nhi·ªát ƒë·ªô
        temperatureValue: 24,
    });

    // L·∫•y th√¥ng tin user t·ª´ localStorage
    useEffect(() => {
        const storedUser = localStorage.getItem('userInfo');
        if (storedUser) {
            setUserInfo(JSON.parse(storedUser));
        }
    }, []);

    // ƒê·ªçc d·ªØ li·ªáu ph√≤ng t·ª´ Firebase theo ID
    useEffect(() => {
        if (id) {
            const roomRef = ref(dbRealtime, `rooms/${id}`);

            const unsubscribe = onValue(roomRef, (snapshot) => {
                if (snapshot.exists()) {
                    const roomData = snapshot.val();
                    console.log(`üìä ƒê√£ t·∫£i d·ªØ li·ªáu ph√≤ng ${id}:`, roomData);

                    // C·∫≠p nh·∫≠t state v·ªõi d·ªØ li·ªáu th·∫≠t t·ª´ Firebase
                    setRoomState(prev => ({
                        ...prev,
                        ...roomData,
                        // ƒê·∫£m b·∫£o c√°c tr∆∞·ªùng c·∫ßn thi·∫øt c√≥ gi√° tr·ªã
                        fanSpeed: roomData.fanSpeed || 50,
                        temperatureValue: parseInt(roomData.temperature) || 24,
                        gasLevel: roomData.gasLevel || 20,
                        humidity: roomData.humidity || 50,
                        lightOn: roomData.lightOn || false,
                        fanOn: roomData.fanOn || false,
                        motionDetected: roomData.motionDetected || false,
                        gasAlert: roomData.gasAlert || false,
                    }));
                } else {
                    console.log(`üìä Kh√¥ng t√¨m th·∫•y ph√≤ng ${id} trong Firebase`);
                    // Gi·ªØ nguy√™n d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
                }
            }, (error) => {
                console.error(`‚ùå L·ªói ƒë·ªçc d·ªØ li·ªáu ph√≤ng ${id}:`, error);
            });

            // Cleanup listener khi component unmount ho·∫∑c ID thay ƒë·ªïi
            return () => off(roomRef, 'value', unsubscribe);
        }
    }, [id]);

    const isLandlord = userInfo?.role === 'landlord';
    const isTenant = userInfo?.role === 'tenant';

    // Ki·ªÉm tra quy·ªÅn xem ph√≤ng
    const canViewRoom = () => {
        if (isLandlord) return true; // Ch·ªß tr·ªç xem t·∫•t c·∫£
        if (isTenant) {
            // Ng∆∞·ªùi thu√™ ch·ªâ xem ph√≤ng 101 (demo)
            return String(id) === '101';
        }
        return false;
    };

    const handleDeviceToggle = async (device) => {
        try {
            const newValue = !roomState[device];

            // C·∫≠p nh·∫≠t local state
            setRoomState(prev => ({
                ...prev,
                [device]: newValue
            }));

            // C·∫≠p nh·∫≠t v√†o Firebase
            const roomRef = ref(dbRealtime, `rooms/${id}`);
            await set(roomRef, {
                ...roomState,
                [device]: newValue,
                updatedAt: new Date().toISOString()
            });

            console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${device}: ${newValue}`);
        } catch (error) {
            console.error(`‚ùå L·ªói c·∫≠p nh·∫≠t ${device}:`, error);
            // Revert local state n·∫øu c√≥ l·ªói
            setRoomState(prev => ({
                ...prev,
                [device]: !prev[device]
            }));
        }
    };

    const handleFanSpeedChange = (event, newValue) => {
        setRoomState(prev => ({
            ...prev,
            fanSpeed: newValue
        }));
    };

    const handleTemperatureChange = (event, newValue) => {
        setRoomState(prev => ({
            ...prev,
            temperatureValue: newValue,
            temperature: `${newValue}¬∞C`
        }));
    };

    const getGasStatus = () => {
        if (roomState.gasLevel > 80) return { color: 'error', text: 'NGUY HI·ªÇM' };
        if (roomState.gasLevel > 60) return { color: 'warning', text: 'C·∫¢NH B√ÅO' };
        return { color: 'success', text: 'B√åNH TH∆Ø·ªúNG' };
    };

    const gasStatus = getGasStatus();

    return (
        <Box sx={{ flexGrow: 1 }}>
            <AppBar position="static" elevation={0}>
                <Toolbar>
                    <IconButton edge="start" color="inherit" onClick={() => navigate(-1)}>
                        <ArrowBackIcon />
                    </IconButton>
                    <Typography variant="h6" component="div" sx={{ ml: 1, flexGrow: 1 }}>
                        Chi ti·∫øt ph√≤ng
                    </Typography>
                    {isLandlord && (
                        <Chip
                            label="Ch·∫ø ƒë·ªô ch·ªß tr·ªç"
                            color="primary"
                            size="small"
                        />
                    )}
                </Toolbar>
            </AppBar>

            <Container maxWidth="md" sx={{ mt: 4, mb: 4 }}>
                {/* Ki·ªÉm tra quy·ªÅn */}
                {!canViewRoom() && (
                    <Alert severity="error" sx={{ mb: 3 }}>
                        <strong>Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!</strong>
                        {isTenant ? ' B·∫°n ch·ªâ c√≥ th·ªÉ xem ph√≤ng c·ªßa m√¨nh.' : ' Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem ph√≤ng.'}
                    </Alert>
                )}

                {/* Tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu */}
                {canViewRoom() && (
                    <Alert severity="info" sx={{ mb: 3 }}>
                        <strong>üìä Th√¥ng tin ph√≤ng:</strong>
                        {roomState.name} - {roomState.status} - {roomState.temperature}
                        {roomState.occupant && ` - Ng∆∞·ªùi thu√™: ${roomState.occupant}`}
                    </Alert>
                )}

                {/* Th√¥ng tin c∆° b·∫£n */}
                {canViewRoom() && (
                    <>
                        <Card sx={{ mb: 3 }}>
                            <CardContent>
                                <Typography variant="h5" sx={{ fontWeight: 'bold', mb: 2 }}>
                                    {roomState.name}
                                </Typography>

                                <Grid container spacing={2} sx={{ mb: 2 }}>
                                    <Grid item xs={12} sm={6}>
                                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                            <HomeIcon color="primary" />
                                            <Typography>Gi√°: {roomState.price}</Typography>
                                        </Box>
                                    </Grid>
                                    <Grid item xs={12} sm={6}>
                                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                            <ThermostatIcon color="secondary" />
                                            <Typography>Nhi·ªát ƒë·ªô: {roomState.temperature}</Typography>
                                        </Box>
                                    </Grid>
                                    <Grid item xs={12} sm={6}>
                                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                            <PeopleIcon color="action" />
                                            <Typography>Ng∆∞·ªùi thu√™: {roomState.occupant || '---'}</Typography>
                                        </Box>
                                    </Grid>
                                    <Grid item xs={12} sm={6}>
                                        <Chip
                                            label={roomState.status}
                                            color={roomState.status === 'C√≥ ng∆∞·ªùi' ? 'success' : 'default'}
                                            sx={{ fontWeight: 'bold' }}
                                        />
                                    </Grid>
                                </Grid>

                                <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', alignItems: 'center' }}>
                                    <Button variant="contained" onClick={() => navigate(`/`)}>V·ªÅ trang ch·ªß</Button>
                                    <Button variant="outlined" onClick={() => navigate(-1)}>Quay l·∫°i</Button>
                                </Box>
                            </CardContent>
                        </Card>

                        {/* ƒêi·ªÅu khi·ªÉn thi·∫øt b·ªã - Ch·ªâ ch·ªß tr·ªç */}
                        {isLandlord && (
                            <Card sx={{ mb: 3 }}>
                                <CardContent>
                                    <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 3, color: 'primary.main' }}>
                                        üéõÔ∏è ƒêi·ªÅu khi·ªÉn thi·∫øt b·ªã
                                    </Typography>

                                    <Grid container spacing={3}>
                                        {/* ƒêi·ªÅu khi·ªÉn ƒë√®n */}
                                        <Grid item xs={12} sm={6}>
                                            <Box sx={{ p: 2, border: '1px solid #e0e0e0', borderRadius: 2 }}>
                                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                                                    <LightModeIcon color={roomState.lightOn ? 'warning' : 'disabled'} />
                                                    <Typography variant="h6">ƒêi·ªÅu khi·ªÉn ƒë√®n</Typography>
                                                </Box>
                                                <FormControlLabel
                                                    control={
                                                        <Switch
                                                            checked={roomState.lightOn}
                                                            onChange={() => handleDeviceToggle('lightOn')}
                                                            color="warning"
                                                        />
                                                    }
                                                    label={roomState.lightOn ? 'ƒê√®n B·∫¨T' : 'ƒê√®n T·∫ÆT'}
                                                />
                                            </Box>
                                        </Grid>

                                        {/* ƒêi·ªÅu khi·ªÉn qu·∫°t */}
                                        <Grid item xs={12} sm={6}>
                                            <Box sx={{ p: 2, border: '1px solid #e0e0e0', borderRadius: 2 }}>
                                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                                                    <AirIcon color={roomState.fanOn ? 'info' : 'disabled'} />
                                                    <Typography variant="h6">ƒêi·ªÅu khi·ªÉn qu·∫°t</Typography>
                                                </Box>
                                                <FormControlLabel
                                                    control={
                                                        <Switch
                                                            checked={roomState.fanOn}
                                                            onChange={() => handleDeviceToggle('fanOn')}
                                                            color="info"
                                                        />
                                                    }
                                                    label={roomState.fanOn ? 'Qu·∫°t B·∫¨T' : 'Qu·∫°t T·∫ÆT'}
                                                />
                                                {roomState.fanOn && (
                                                    <Box sx={{ mt: 2 }}>
                                                        <Typography variant="body2" color="text.secondary" gutterBottom>
                                                            T·ªëc ƒë·ªô qu·∫°t: {roomState.fanSpeed}%
                                                        </Typography>
                                                        <Slider
                                                            value={roomState.fanSpeed}
                                                            onChange={handleFanSpeedChange}
                                                            min={0}
                                                            max={100}
                                                            step={10}
                                                            marks
                                                            valueLabelDisplay="auto"
                                                        />
                                                    </Box>
                                                )}
                                            </Box>
                                        </Grid>

                                        {/* ƒêi·ªÅu ch·ªânh nhi·ªát ƒë·ªô */}
                                        <Grid item xs={12}>
                                            <Box sx={{ p: 2, border: '1px solid #e0e0e0', borderRadius: 2 }}>
                                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                                                    <ThermostatIcon color="secondary" />
                                                    <Typography variant="h6">ƒêi·ªÅu ch·ªânh nhi·ªát ƒë·ªô</Typography>
                                                </Box>
                                                <Typography variant="body2" color="text.secondary" gutterBottom>
                                                    Nhi·ªát ƒë·ªô hi·ªán t·∫°i: {roomState.temperatureValue}¬∞C
                                                </Typography>
                                                <Slider
                                                    value={roomState.temperatureValue}
                                                    onChange={handleTemperatureChange}
                                                    min={16}
                                                    max={35}
                                                    step={1}
                                                    marks
                                                    valueLabelDisplay="auto"
                                                    color="secondary"
                                                />
                                            </Box>
                                        </Grid>
                                    </Grid>
                                </CardContent>
                            </Card>
                        )}

                        {/* Gi√°m s√°t c·∫£m bi·∫øn */}
                        <Card>
                            <CardContent>
                                <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 3, color: 'info.main' }}>
                                    üìä Gi√°m s√°t c·∫£m bi·∫øn
                                </Typography>

                                <Grid container spacing={3}>
                                    {/* C·∫£m bi·∫øn kh√≠ gas */}
                                    <Grid item xs={12} sm={6}>
                                        <Box sx={{ p: 2, border: '1px solid #e0e0e0', borderRadius: 2 }}>
                                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                                                <GasMeterIcon color={gasStatus.color} />
                                                <Typography variant="h6">C·∫£m bi·∫øn kh√≠ gas</Typography>
                                            </Box>
                                            <Typography variant="h4" color={gasStatus.color} sx={{ fontWeight: 'bold', mb: 1 }}>
                                                {roomState.gasLevel}%
                                            </Typography>
                                            <Chip
                                                label={gasStatus.text}
                                                color={gasStatus.color}
                                                sx={{ fontWeight: 'bold' }}
                                            />
                                            {isLandlord && (
                                                <Box sx={{ mt: 2 }}>
                                                    <Typography variant="body2" color="text.secondary" gutterBottom>
                                                        M·ª©c kh√≠ gas: {roomState.gasLevel}%
                                                    </Typography>
                                                    <Slider
                                                        value={roomState.gasLevel}
                                                        onChange={(e, newValue) => setRoomState(prev => ({ ...prev, gasLevel: newValue }))}
                                                        min={0}
                                                        max={100}
                                                        step={5}
                                                        marks
                                                        valueLabelDisplay="auto"
                                                        color={gasStatus.color}
                                                    />
                                                </Box>
                                            )}
                                        </Box>
                                    </Grid>

                                    {/* C·∫£m bi·∫øn chuy·ªÉn ƒë·ªông */}
                                    <Grid item xs={12} sm={6}>
                                        <Box sx={{ p: 2, border: '1px solid #e0e0e0', borderRadius: 2 }}>
                                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                                                <SensorsIcon color={roomState.motionDetected ? 'warning' : 'disabled'} />
                                                <Typography variant="h6">C·∫£m bi·∫øn chuy·ªÉn ƒë·ªông</Typography>
                                            </Box>
                                            <Typography variant="h4" color={roomState.motionDetected ? 'warning.main' : 'text.secondary'} sx={{ fontWeight: 'bold', mb: 1 }}>
                                                {roomState.motionDetected ? 'C√ì' : 'KH√îNG'}
                                            </Typography>
                                            <Chip
                                                label={roomState.motionDetected ? 'Ph√°t hi·ªán chuy·ªÉn ƒë·ªông' : 'Kh√¥ng c√≥ chuy·ªÉn ƒë·ªông'}
                                                color={roomState.motionDetected ? 'warning' : 'default'}
                                                sx={{ fontWeight: 'bold' }}
                                            />
                                            {isLandlord && (
                                                <FormControlLabel
                                                    control={
                                                        <Switch
                                                            checked={roomState.motionDetected}
                                                            onChange={() => handleDeviceToggle('motionDetected')}
                                                            color="warning"
                                                        />
                                                    }
                                                    label="M√¥ ph·ªèng chuy·ªÉn ƒë·ªông"
                                                    sx={{ mt: 2 }}
                                                />
                                            )}
                                        </Box>
                                    </Grid>

                                    {/* C·∫£m bi·∫øn ƒë·ªô ·∫©m */}
                                    <Grid item xs={12}>
                                        <Box sx={{ p: 2, border: '1px solid #e0e0e0', borderRadius: 2 }}>
                                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                                                <OpacityIcon color="info" />
                                                <Typography variant="h6">C·∫£m bi·∫øn ƒë·ªô ·∫©m</Typography>
                                            </Box>
                                            <Typography variant="h4" color="info.main" sx={{ fontWeight: 'bold', mb: 1 }}>
                                                {roomState.humidity}%
                                            </Typography>
                                            <Chip
                                                label={`ƒê·ªô ·∫©m: ${roomState.humidity}%`}
                                                color="info"
                                                sx={{ fontWeight: 'bold' }}
                                            />
                                            {isLandlord && (
                                                <Box sx={{ mt: 2 }}>
                                                    <Typography variant="body2" color="text.secondary" gutterBottom>
                                                        ƒê·ªô ·∫©m: {roomState.humidity}%
                                                    </Typography>
                                                    <Slider
                                                        value={roomState.humidity}
                                                        onChange={(e, newValue) => setRoomState(prev => ({ ...prev, humidity: newValue }))}
                                                        min={20}
                                                        max={90}
                                                        step={5}
                                                        marks
                                                        valueLabelDisplay="auto"
                                                        color="info"
                                                    />
                                                </Box>
                                            )}
                                        </Box>
                                    </Grid>
                                </Grid>
                            </CardContent>
                        </Card>

                        {/* Th√¥ng b√°o cho ng∆∞·ªùi thu√™ */}
                        {!isLandlord && (
                            <Alert severity="info" sx={{ mt: 3 }}>
                                <strong>L∆∞u √Ω:</strong> Ch·ªâ ch·ªß tr·ªç m·ªõi c√≥ th·ªÉ ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã v√† c·∫£m bi·∫øn.
                            </Alert>
                        )}
                    </>
                )}
            </Container>
        </Box>
    );
};

export default RoomDetailPage;


